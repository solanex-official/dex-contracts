use anchor_lang::prelude::*;
use anchor_spl::associated_token::AssociatedToken;
use anchor_spl::token::{self, Mint, Token, TokenAccount};

use crate::{state::*, util::mint_position_token_and_remove_authority};

#[event]
pub struct PositionOpenedEvent {
    pub funder: Pubkey,
    pub ai_dex_pool: Pubkey,
    pub position: Pubkey,
    pub position_mint: Pubkey,
    pub position_token_account: Pubkey,
    pub owner: Pubkey,
    pub tick_lower_index: i32,  // Assuming tick indices are 32-bit integers
    pub tick_upper_index: i32,  // Assuming tick indices are 32-bit integers
    pub token_program: Pubkey,
    pub position_seed: u64,
    pub is_reinvestment_on: bool,
}

#[derive(Accounts)]
#[instruction(position_seed: u64, tick_lower_index: i32, tick_upper_index: i32)]
pub struct OpenPosition<'info> {
    #[account(mut)]
    pub funder: Signer<'info>,

    /// CHECK: safe, the account that will be the owner of the position can be arbitrary
    pub owner: UncheckedAccount<'info>,

    #[account(
        init,
        payer = funder,
        space = Position::LEN,
        seeds = [b"position".as_ref(), position_mint.key().as_ref()],
        bump,
    )]
    pub position: Box<Account<'info, Position>>,

    #[account(
        init,
        payer = funder,
        mint::authority = ai_dex_pool,
        mint::decimals = 0,
        seeds = [
            b"position_mint",
            ai_dex_pool.key().as_ref(),
            owner.key().as_ref(),
            position_seed.to_string().as_bytes(),
            tick_lower_index.to_string().as_bytes(),
            tick_upper_index.to_string().as_bytes(),
        ],
        bump,
    )]
    pub position_mint: Account<'info, Mint>,

    #[account(
        init,
        payer = funder,
        associated_token::mint = position_mint,
        associated_token::authority = owner,
    )]
    pub position_token_account: Box<Account<'info, TokenAccount>>,

    pub ai_dex_pool: AccountLoader<'info, AiDexPool>,

    #[account(address = token::ID)]
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
    pub associated_token_program: Program<'info, AssociatedToken>,
}

/// Opens a position in the AI DEX.
///
/// # Arguments
///
/// * `ctx` - The context containing the accounts required for opening the position.
/// * `_bumps` - The bumps generated by derive(Accounts) for OpenPositionBumps.
/// * `tick_lower_index` - The lower tick index for the position.
/// * `tick_upper_index` - The upper tick index for the position.
///
/// # Returns
///
/// * `Result<()>` - Returns an Ok result if the position is successfully opened, otherwise returns an error.
///
/// # Errors
///
/// This function will return an error if:
/// - The position cannot be opened.
/// - The position token cannot be minted or the authority cannot be removed.
pub fn open_position_handler(
    ctx: Context<OpenPosition>,
    position_seed: u64,  // Add a unique position_seed
    tick_lower_index: i32,
    tick_upper_index: i32,
    is_reinvestment_on: bool,
) -> Result<()> {
    let ai_dex = &ctx.accounts.ai_dex_pool;
    let position_mint = &ctx.accounts.position_mint;
    let position = &mut ctx.accounts.position;

    // Open the position
    position.open_position(
        ai_dex,
        position_mint.key(),
        tick_lower_index,
        tick_upper_index,
        is_reinvestment_on,
    )?;

    // Mint the position token and remove the authority
    mint_position_token_and_remove_authority(
        ai_dex,
        position_mint,
        &ctx.accounts.position_token_account,
        &ctx.accounts.token_program,
    )?;

    emit!(PositionOpenedEvent {
        funder: ctx.accounts.funder.key(),
        ai_dex_pool: ai_dex.key(),
        position: position.key(),
        position_mint: position_mint.key(),
        position_token_account: ctx.accounts.position_token_account.key(),
        owner: ctx.accounts.owner.key(),
        tick_lower_index,
        tick_upper_index,
        token_program: ctx.accounts.token_program.key(),
        position_seed,
        is_reinvestment_on,
    });

    Ok(())
}